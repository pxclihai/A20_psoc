C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_1_EPISR
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBFS_1_episr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_1_episr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(
                    -2) PR(.\DP8051_Keil_951\Debug/USBFS_1_episr.lst) CD OT(0,SIZE) OJ(.\DP8051_Keil_951\Debug\USBFS_1_episr.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_1_episr.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  Data endpoint Interrupt Service Routines
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBFS_1.h"
  18          #include "USBFS_1_pvt.h"
  19          #include "cyapicallbacks.h"
  20          #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && (USBFS_1_ENABLE_MIDI_API != 0u))
                  #include "USBFS_1_midi.h"
              #endif /* (defined(USBFS_1_ENABLE_MIDI_STREAMING) && (USBFS_1_ENABLE_MIDI_API != 0u)) */
  23          #if ((USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0u))
                  #include "USBFS_1_EP8_DMA_Done_SR.h"
                  #include "USBFS_1_EP17_DMA_Done_SR.h"
              #endif /* (USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0u) */
  27          
  28          
  29          /***************************************
  30          * Custom Declarations
  31          ***************************************/
  32          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  33          
  34          /* `#END` */
  35          
  36          
  37          #if(USBFS_1_EP1_ISR_REMOVE == 0u)
  38          
  39          
  40              /******************************************************************************
  41              * Function Name: USBFS_1_EP_1_ISR
  42              *******************************************************************************
  43              *
  44              * Summary:
  45              *  Endpoint 1 Interrupt Service Routine
  46              *
  47              * Parameters:
  48              *  None.
  49              *
  50              * Return:
  51              *  None.
  52              *
  53              ******************************************************************************/
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 2   

  54              CY_ISR(USBFS_1_EP_1_ISR)
  55              {
  56   1              #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT)  && \
  57   1                           USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
  60   1      
  61   1              #ifdef USBFS_1_EP_1_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_1_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_1_ISR_ENTRY_CALLBACK */
  64   1      
  65   1              /* `#START EP1_USER_CODE` Place your code here */
  66   1      
  67   1              /* `#END` */
  68   1      
  69   1              #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
  70   1                           USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
  74   1      
  75   1              CY_GET_REG8(USBFS_1_SIE_EP1_CR0_PTR); /* Must read the mode reg */
  76   1              /* Do not toggle ISOC endpoint */
  77   1              if((USBFS_1_EP[USBFS_1_EP1].attrib & USBFS_1_EP_TYPE_MASK) !=
  78   1                                                                                          USBFS_1_EP_TYPE_ISOC)
  79   1              {
  80   2                  USBFS_1_EP[USBFS_1_EP1].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
  81   2              }
  82   1              USBFS_1_EP[USBFS_1_EP1].apiEpState = USBFS_1_EVENT_PENDING;
  83   1              CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR) &
  84   1                                                                          (uint8)~USBFS_1_SIE_EP_INT_EP1_MASK);
  85   1      
  86   1              #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
  87   1                           USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP1)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
  93   1      
  94   1              /* `#START EP1_END_USER_CODE` Place your code here */
  95   1      
  96   1              /* `#END` */
  97   1      
  98   1              #ifdef USBFS_1_EP_1_ISR_EXIT_CALLBACK
                          USBFS_1_EP_1_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_1_ISR_EXIT_CALLBACK */
 101   1      
 102   1              #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
 103   1                           USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 106   1          }
 107          
 108          #endif   /*  USBFS_1_EP1_ISR_REMOVE */
 109          
 110          
 111          #if(USBFS_1_EP2_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_2_ISR
                  ********************************************************************************
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 3   

                  *
                  * Summary:
                  *  Endpoint 2 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_2_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      #ifdef USBFS_1_EP_2_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_2_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_2_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP2_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      CY_GET_REG8(USBFS_1_SIE_EP2_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP2].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP2].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP2].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP2_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP2)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP2_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_2_ISR_EXIT_CALLBACK
                          USBFS_1_EP_2_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_2_ISR_EXIT_CALLBACK */
                      
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 4   

                          EA = int_en;
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
                  }
              
              #endif   /*  USBFS_1_EP2_ISR_REMOVE */
 182          
 183          
 184          #if(USBFS_1_EP3_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_3_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 3 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_3_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      #ifdef USBFS_1_EP_3_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_3_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_3_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP3_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP3_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP3].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP3].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP3].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP3_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP3)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 5   

                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP3_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_3_ISR_EXIT_CALLBACK
                          USBFS_1_EP_3_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_3_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_1_EP3_ISR_REMOVE */
 255          
 256          
 257          #if(USBFS_1_EP4_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_4_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 4 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_4_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_1_EP_4_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_4_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_4_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP4_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP4_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP4].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP4].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 6   

                      }
                      USBFS_1_EP[USBFS_1_EP4].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP4_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP4)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP4_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_4_ISR_EXIT_CALLBACK
                          USBFS_1_EP_4_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_4_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_1_EP4_ISR_REMOVE */
 328          
 329          
 330          #if(USBFS_1_EP5_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_5_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 5 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_5_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_1_EP_5_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_5_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_5_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP5_USER_CODE` Place your code here */
              
                      /* `#END` */
              
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 7   

                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP5_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP5].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP5].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP5].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP5_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP5)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP5_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_5_ISR_EXIT_CALLBACK
                          USBFS_1_EP_5_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_5_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
              #endif   /*  USBFS_1_EP5_ISR_REMOVE */
 400          
 401          
 402          #if(USBFS_1_EP6_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_6_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 6 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_6_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 8   

                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_1_EP_6_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_6_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_6_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP6_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP6_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP6].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP6].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP6].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP6_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP6)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP6_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_6_ISR_EXIT_CALLBACK
                          USBFS_1_EP_6_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_6_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_1_EP6_ISR_REMOVE */
 473          
 474          
 475          #if(USBFS_1_EP7_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_7_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 7 Interrupt Service Routine
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 9   

                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_7_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_1_EP_7_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_7_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_7_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP7_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP7_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP7].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP7].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP7].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP7_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP7)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP7_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_7_ISR_EXIT_CALLBACK
                          USBFS_1_EP_7_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_7_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 10  

              
              #endif   /*  USBFS_1_EP7_ISR_REMOVE */
 546          
 547          
 548          #if(USBFS_1_EP8_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_EP_8_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 8 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_EP_8_ISR)
                  {
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_1_EP_8_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_8_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_8_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP8_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_1_SIE_EP8_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_1_EP[USBFS_1_EP8].attrib & USBFS_1_EP_TYPE_MASK) !=
                                                                                                  USBFS_1_EP_TYPE_ISOC)
                      {
                          USBFS_1_EP[USBFS_1_EP8].epToggle ^= USBFS_1_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_1_EP[USBFS_1_EP8].apiEpState = USBFS_1_EVENT_PENDING;
                      CY_SET_REG8(USBFS_1_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_1_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_1_SIE_EP_INT_EP8_M
             -ASK);
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_1_midi_out_ep == USBFS_1_EP8)
                          {
                              USBFS_1_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_1_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP8_END_USER_CODE` Place your code here */
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 11  

              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_8_ISR_EXIT_CALLBACK
                          USBFS_1_EP_8_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_8_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && !defined(USBFS_1_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_1_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_1_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_1_EP8_ISR_REMOVE */
 619          
 620          
 621          /*******************************************************************************
 622          * Function Name: USBFS_1_SOF_ISR
 623          ********************************************************************************
 624          *
 625          * Summary:
 626          *  Start of Frame Interrupt Service Routine
 627          *
 628          * Parameters:
 629          *  None.
 630          *
 631          * Return:
 632          *  None.
 633          *
 634          *******************************************************************************/
 635          CY_ISR(USBFS_1_SOF_ISR)
 636          {
 637   1          #ifdef USBFS_1_SOF_ISR_INTERRUPT_CALLBACK
                      USBFS_1_SOF_ISR_InterruptCallback();
                  #endif /* USBFS_1_SOF_ISR_INTERRUPT_CALLBACK */
 640   1      
 641   1          /* `#START SOF_USER_CODE` Place your code here */
 642   1      
 643   1          /* `#END` */
 644   1      }
 645          
 646          
 647          /*******************************************************************************
 648          * Function Name: USBFS_1_BUS_RESET_ISR
 649          ********************************************************************************
 650          *
 651          * Summary:
 652          *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 653          *  parameters as the last USER call to _Start
 654          *
 655          * Parameters:
 656          *  None.
 657          *
 658          * Return:
 659          *  None.
 660          *
 661          *******************************************************************************/
 662          CY_ISR(USBFS_1_BUS_RESET_ISR)
 663          {
 664   1          #ifdef USBFS_1_BUS_RESET_ISR_ENTRY_CALLBACK
                      USBFS_1_BUS_RESET_ISR_EntryCallback();
                  #endif /* USBFS_1_BUS_RESET_ISR_ENTRY_CALLBACK */
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 12  

 667   1      
 668   1          /* `#START BUS_RESET_USER_CODE` Place your code here */
 669   1      
 670   1          /* `#END` */
 671   1      
 672   1          USBFS_1_ReInitComponent();
 673   1      
 674   1          #ifdef USBFS_1_BUS_RESET_ISR_EXIT_CALLBACK
                      USBFS_1_BUS_RESET_ISR_ExitCallback();
                  #endif /* USBFS_1_BUS_RESET_ISR_EXIT_CALLBACK */    
 677   1      }
 678          
 679          
 680          #if((USBFS_1_EP_MM != USBFS_1__EP_MANUAL) && (USBFS_1_ARB_ISR_REMOVE == 0u))
              
              
                  /*******************************************************************************
                  * Function Name: USBFS_1_ARB_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Arbiter Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Side effect:
                  *  Search for EP8 int_status will be much slower than search for EP1 int_status.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_1_ARB_ISR)
                  {
                      uint8 int_status;
                      uint8 ep_status;
                      uint8 ep = USBFS_1_EP1;
                      uint8 ptr = 0u;
              
                      #ifdef USBFS_1_ARB_ISR_ENTRY_CALLBACK
                          USBFS_1_ARB_ISR_EntryCallback();
                      #endif /* USBFS_1_ARB_ISR_ENTRY_CALLBACK */
              
                      /* `#START ARB_BEGIN_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      int_status = USBFS_1_ARB_INT_SR_REG;                   /* read Arbiter Status Register */
                      USBFS_1_ARB_INT_SR_REG = int_status;                   /* Clear Serviced Interrupts */
              
                      while(int_status != 0u)
                      {
                          if((int_status & 1u) != 0u)  /* If EpX interrupt present */
                          {   /* read Endpoint Status Register */
                              ep_status  = CY_GET_REG8((reg8 *)(USBFS_1_ARB_EP1_SR_IND + ptr));
                              /* If In Buffer Full */
                              if((ep_status & USBFS_1_ARB_EPX_SR_IN_BUF_FULL) != 0u)
                              {
                                  if((USBFS_1_EP[ep].addr & USBFS_1_DIR_IN) != 0u)
                                  {
                                      /* Clear Data ready status */
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 13  

                                      *(reg8 *)(USBFS_1_ARB_EP1_CFG_IND + ptr) &=
                                                                                  (uint8)~USBFS_1_ARB_EPX_CFG_IN_DATA_RD
             -Y;
                                      #if((USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0u))
                                          /* Setup common area DMA with rest of the data */
                                          if(USBFS_1_inLength[ep] > USBFS_1_DMA_BYTES_PER_BURST)
                                          {
                                              USBFS_1_LoadNextInEP(ep, 0u);
                                          }
                                          else
                                          {
                                              USBFS_1_inBufFull[ep] = 1u;
                                          }
                                      #endif /* ((USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0
             -u)) */
                                      /* Write the Mode register */
                                      CY_SET_REG8((reg8 *)(USBFS_1_SIE_EP1_CR0_IND + ptr), USBFS_1_EP[ep].epMode);
                                      #if (defined(USBFS_1_ENABLE_MIDI_STREAMING) && USBFS_1_ISR_SERVICE_MIDI_IN)
                                          if(ep == USBFS_1_midi_in_ep)
                                          {   /* Clear MIDI input pointer */
                                              USBFS_1_midiInPointer = 0u;
                                          }
                                      #endif /*  USBFS_1_ENABLE_MIDI_STREAMING*/
                                  }
                              }
                              /* (re)arm Out EP only for mode2 */
                              #if(USBFS_1_EP_MM != USBFS_1__EP_DMAAUTO)
                                  /* If DMA Grant */
                                  if((ep_status & USBFS_1_ARB_EPX_SR_DMA_GNT) != 0u)
                                  {
                                      if((USBFS_1_EP[ep].addr & USBFS_1_DIR_IN) == 0u)
                                      {
                                              USBFS_1_EP[ep].apiEpState = USBFS_1_NO_EVENT_PENDING;
                                              /* Write the Mode register */
                                              CY_SET_REG8((reg8 *)(USBFS_1_SIE_EP1_CR0_IND + ptr),
                                                                                                  USBFS_1_EP[ep].epMode)
             -;
                                      }
                                  }
                              #endif /*  USBFS_1_EP_MM */
              
                              /* `#START ARB_USER_CODE` Place your code here for handle Buffer Underflow/Overflow */
              
                              /* `#END` */
              
                              #ifdef USBFS_1_ARB_ISR_CALLBACK
                                  USBFS_1_ARB_ISR_Callback();
                              #endif /* USBFS_1_ARB_ISR_CALLBACK */
              
                              CY_SET_REG8((reg8 *)(USBFS_1_ARB_EP1_SR_IND + ptr), ep_status);   /* Clear Serviced events
             - */
                          }
                          ptr += USBFS_1_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
                          ep++;
                          int_status >>= 1u;
                      }
              
                      /* `#START ARB_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_ARB_ISR_EXIT_CALLBACK
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 14  

                          USBFS_1_ARB_ISR_ExitCallback();
                      #endif /* USBFS_1_ARB_ISR_EXIT_CALLBACK */
                  }
              
              #endif /*  USBFS_1_EP_MM */
 792          
 793          #if ((USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0u))
                  /******************************************************************************
                  * Function Name: USBFS_1_EP_DMA_DONE_ISR
                  *******************************************************************************
                  *
                  * Summary:
                  *  Endpoint 1 DMA Done Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  ******************************************************************************/
                  CY_ISR(USBFS_1_EP_DMA_DONE_ISR)
                  {
                      uint8 int8Status;
                      uint8 int17Status;
                      uint8 ep_status;
                      uint8 ep = USBFS_1_EP1;
                      uint8 ptr = 0u;
              
                      #ifdef USBFS_1_EP_DMA_DONE_ISR_ENTRY_CALLBACK
                          USBFS_1_EP_DMA_DONE_ISR_EntryCallback();
                      #endif /* USBFS_1_EP_DMA_DONE_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP_DMA_DONE_BEGIN_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      /* Read clear on read status register with the EP source of interrupt */
                      int17Status = USBFS_1_EP17_DMA_Done_SR_Read() & USBFS_1_EP17_SR_MASK;
                      int8Status = USBFS_1_EP8_DMA_Done_SR_Read() & USBFS_1_EP8_SR_MASK;
              
                      while(int8Status != 0u)
                      {
                          while(int17Status != 0u)
                          {
                              if((int17Status & 1u) != 0u)  /* If EpX interrupt present */
                              {
                                  /* Read Endpoint Status Register */
                                  ep_status = CY_GET_REG8((reg8 *)(USBFS_1_ARB_EP1_SR_IND + ptr));
                                  if( ((ep_status & USBFS_1_ARB_EPX_SR_IN_BUF_FULL) == 0u) &&
                                      (USBFS_1_inBufFull[ep] == 0u))
                                  {
                                      /* `#START EP_DMA_DONE_USER_CODE` Place your code here */
              
                                      /* `#END` */
              
                                      #ifdef USBFS_1_EP_DMA_DONE_ISR_CALLBACK
                                          USBFS_1_EP_DMA_DONE_ISR_Callback();
                                      #endif /* USBFS_1_EP_DMA_DONE_ISR_CALLBACK */
              
                                      CY_SET_REG8((reg8 *)(USBFS_1_ARB_RW1_WA_MSB_IND + ptr), 0x00u);
                                      /* repeat 2 last bytes to prefetch endpoint area */
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 15  

                                      CY_SET_REG8((reg8 *)(USBFS_1_ARB_RW1_WA_IND + ptr),
                                                  USBFS_1_DMA_BYTES_PER_BURST * ep - USBFS_1_DMA_BYTES_REPEAT);
                                      USBFS_1_LoadNextInEP(ep, 1);
                                      /* Set Data ready status, This will generate DMA request */
                                      * (reg8 *)(USBFS_1_ARB_EP1_CFG_IND + ptr) |= USBFS_1_ARB_EPX_CFG_IN_DATA_RDY;
                                  }
                              }
                              ptr += USBFS_1_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
                              ep++;
                              int17Status >>= 1u;
                          }
                          int8Status >>= 1u;
                          if(int8Status != 0u)
                          {
                              /* Prepare pointer for EP8 */
                              ptr = ((USBFS_1_EP8 - USBFS_1_EP1) << USBFS_1_EPX_CNTX_ADDR_SHIFT);
                              ep = USBFS_1_EP8;
                              int17Status = int8Status & 0x01u;
                          }
                      }
              
                      /* `#START EP_DMA_DONE_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_1_EP_DMA_DONE_ISR_EXIT_CALLBACK
                          USBFS_1_EP_DMA_DONE_ISR_ExitCallback();
                      #endif /* USBFS_1_EP_DMA_DONE_ISR_EXIT_CALLBACK */
                  }
              #endif /* ((USBFS_1_EP_MM == USBFS_1__EP_DMAAUTO) && (USBFS_1_EP_DMA_AUTO_OPT == 0u)) */
 879          
 880          
 881          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_1_EP_1_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 75
001D 90600E            MOV     DPTR,#0600EH
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
                                           ; SOURCE LINE # 77
0022 900000      E     MOV     DPTR,#USBFS_1_EP+0BH
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 5403              ANL     A,#03H
002A FF                MOV     R7,A
002B 7E00              MOV     R6,#00H
002D EF                MOV     A,R7
002E 6401              XRL     A,#01H
0030 4E                ORL     A,R6
0031 600E              JZ      ?C0001
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0033 900000      E     MOV     DPTR,#USBFS_1_EP+0EH
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6480              XRL     A,#080H
003B FF                MOV     R7,A
003C 900000      E     MOV     DPTR,#USBFS_1_EP+0EH
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
0041         ?C0001:
                                           ; SOURCE LINE # 82
0041 900000      E     MOV     DPTR,#USBFS_1_EP+0CH
0044 7401              MOV     A,#01H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0047 90600B            MOV     DPTR,#0600BH
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 54FE              ANL     A,#0FEH
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0052         ?C0002:
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 17  

0052 D007              POP     AR7
0054 D006              POP     AR6
0056 D0D0              POP     PSW
0058 D000        E     POP     ?C?XPAGE1SFR
005A D086              POP     DPS
005C D084              POP     DPL1
005E D085              POP     DPH1
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 D0E0              POP     ACC
0066 32                RETI    
             ; FUNCTION USBFS_1_EP_1_ISR (END)

             ; FUNCTION USBFS_1_SOF_ISR (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 644
0000         ?C0003:
0000 32                RETI    
             ; FUNCTION USBFS_1_SOF_ISR (END)

             ; FUNCTION USBFS_1_BUS_RESET_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 672
002B 120000      E     LCALL   USBFS_1_ReInitComponent
                                           ; SOURCE LINE # 677
002E         ?C0004:
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
C51 COMPILER V9.51   USBFS_1_EPISR                                                         09/19/2016 16:11:33 PAGE 18  

004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USBFS_1_BUS_RESET_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    185    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
